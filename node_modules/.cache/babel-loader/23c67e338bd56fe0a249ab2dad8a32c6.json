{"ast":null,"code":"var _jsxFileName = \"/Users/robertfreeman/Desktop/Qualified/Project_Pomodoro_timer_Qualified_1/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./utils/useInterval\";\nimport FocusDuration from \"./pomodoro/FocusDuration\";\nimport BreakDuration from \"./pomodoro/BreakDuration\";\nimport PlayPauseBtn from \"./pomodoro/PlayPauseBtn\";\nimport SessionTitle from \"./pomodoro/SessionTitle\";\nimport SessionProgressBar from \"./pomodoro/SessionProgressBar\";\nimport StopBtn from \"./pomodoro/StopBtn\"; // These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction App() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  console.log(\"session\", session);\n  const btnsInitialState = {\n    stopBtn: true,\n    focusBtns: true,\n    breakBtns: true\n  };\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [isBtnsDisabled, setIsBtnsDisabled] = useState(btnsInitialState);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Pomodoro Timer\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    session: session,\n    isBtnsDisabled: isBtnsDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    session: session,\n    isBtnsEnabled: isBtnsEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(PlayPauseBtn, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(StopBtn, {\n    session: session,\n    isBtnsEnabled: isBtnsEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SessionTitle, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SessionProgressBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  })))));\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/robertfreeman/Desktop/Qualified/Project_Pomodoro_timer_Qualified_1/src/App.js"],"names":["React","useState","useInterval","FocusDuration","BreakDuration","PlayPauseBtn","SessionTitle","SessionProgressBar","StopBtn","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","App","isTimerRunning","setIsTimerRunning","session","setSession","console","log","btnsInitialState","stopBtn","focusBtns","breakBtns","setFocusDuration","setBreakDuration","isBtnsDisabled","setIsBtnsDisabled","Audio","play","playPause","nextState","prevStateSession","isBtnsEnabled"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./utils/useInterval\";\nimport FocusDuration from \"./pomodoro/FocusDuration\";\nimport BreakDuration from \"./pomodoro/BreakDuration\";\nimport PlayPauseBtn from \"./pomodoro/PlayPauseBtn\";\nimport SessionTitle from \"./pomodoro/SessionTitle\";\nimport SessionProgressBar from \"./pomodoro/SessionProgressBar\";\nimport StopBtn from \"./pomodoro/StopBtn\";\n\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n function nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\n\nfunction App() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  console.log(\"session\", session);\n\n  const btnsInitialState = {\n    stopBtn: true,\n    focusBtns: true,\n    breakBtns: true,\n  };\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [isBtnsDisabled, setIsBtnsDisabled] = useState(btnsInitialState);\n\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <div className=\"pomodoro\">\n          <div className=\"row\">\n            <FocusDuration \n              focusDuration={focusDuration} \n              setFocusDuration={setFocusDuration}\n              session={session}\n              isBtnsDisabled={isBtnsDisabled}\n            />\n            <BreakDuration \n              breakDuration={breakDuration} \n              setBreakDuration={setBreakDuration}\n              session={session}\n              isBtnsEnabled={isBtnsEnabled} \n            />\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <div\n                className=\"btn-group btn-group-lg mb-2\"\n                role=\"group\"\n                aria-label=\"Timer controls\"\n              >\n                <PlayPauseBtn \n                  playPause={playPause} \n                  isTimerRunning={isTimerRunning}\n                />\n                {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n                {/* TODO: Disable the stop button when there is no active session */}\n                <StopBtn \n                  session={session} \n                  isBtnsEnabled={isBtnsEnabled} \n                />\n              </div>\n            </div>\n          </div>\n          <div>\n            {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n            <SessionTitle \n              session={session}\n              focusDuration={focusDuration}\n              breakDuration={breakDuration}\n              isTimerRunning={isTimerRunning}\n            />\n            <SessionProgressBar />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}